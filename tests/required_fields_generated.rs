// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(u8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum Events {
  NONE = 0,
  MouseMoveEvent = 1,
  KeyboardEvent = 2,

}

const ENUM_MIN_EVENTS: u8 = 0;
const ENUM_MAX_EVENTS: u8 = 2;

impl<'a> flatbuffers::Follow<'a> for Events {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for Events {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u8::to_le(self as u8);
    let p = &n as *const u8 as *const Events;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u8::from_le(self as u8);
    let p = &n as *const u8 as *const Events;
    unsafe { *p }
  }
}

impl flatbuffers::Push for Events {
    type Output = Events;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<Events>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
const ENUM_VALUES_EVENTS:[Events; 3] = [
  Events::NONE,
  Events::MouseMoveEvent,
  Events::KeyboardEvent
];

#[allow(non_camel_case_types)]
const ENUM_NAMES_EVENTS:[&'static str; 3] = [
    "NONE",
    "MouseMoveEvent",
    "KeyboardEvent"
];

pub fn enum_name_events(e: Events) -> &'static str {
  let index = e as u8;
  ENUM_NAMES_EVENTS[index as usize]
}

pub struct EventsUnionTableOffset {}
pub enum MouseMoveEventOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct MouseMoveEvent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MouseMoveEvent<'a> {
    type Inner = MouseMoveEvent<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> MouseMoveEvent<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        MouseMoveEvent {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args MouseMoveEventArgs) -> flatbuffers::WIPOffset<MouseMoveEvent<'bldr>> {
      let mut builder = MouseMoveEventBuilder::new(_fbb);
      builder.add_y(args.y);
      builder.add_x(args.x);
      builder.finish()
    }

    pub const VT_X: flatbuffers::VOffsetT = 4;
    pub const VT_Y: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn x(&self) -> u32 {
    self._tab.get::<u32>(MouseMoveEvent::VT_X, Some(0)).unwrap()
  }
  #[inline]
  pub fn y(&self) -> u32 {
    self._tab.get::<u32>(MouseMoveEvent::VT_Y, Some(0)).unwrap()
  }
}

pub struct MouseMoveEventArgs {
    pub x: u32,
    pub y: u32,
}
impl<'a> Default for MouseMoveEventArgs {
    #[inline]
    fn default() -> Self {
        MouseMoveEventArgs {
            x: 0,
            y: 0,
        }
    }
}
pub struct MouseMoveEventBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> MouseMoveEventBuilder<'a, 'b> {
  #[inline]
  pub fn add_x(&mut self, x: u32) {
    self.fbb_.push_slot::<u32>(MouseMoveEvent::VT_X, x, 0);
  }
  #[inline]
  pub fn add_y(&mut self, y: u32) {
    self.fbb_.push_slot::<u32>(MouseMoveEvent::VT_Y, y, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MouseMoveEventBuilder<'a, 'b> {
    let start = _fbb.start_table();
    MouseMoveEventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MouseMoveEvent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum KeyboardEventOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct KeyboardEvent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for KeyboardEvent<'a> {
    type Inner = KeyboardEvent<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> KeyboardEvent<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        KeyboardEvent {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args KeyboardEventArgs) -> flatbuffers::WIPOffset<KeyboardEvent<'bldr>> {
      let mut builder = KeyboardEventBuilder::new(_fbb);
      builder.add_keycode(args.keycode);
      builder.finish()
    }

    pub const VT_KEYCODE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn keycode(&self) -> u32 {
    self._tab.get::<u32>(KeyboardEvent::VT_KEYCODE, Some(0)).unwrap()
  }
}

pub struct KeyboardEventArgs {
    pub keycode: u32,
}
impl<'a> Default for KeyboardEventArgs {
    #[inline]
    fn default() -> Self {
        KeyboardEventArgs {
            keycode: 0,
        }
    }
}
pub struct KeyboardEventBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> KeyboardEventBuilder<'a, 'b> {
  #[inline]
  pub fn add_keycode(&mut self, keycode: u32) {
    self.fbb_.push_slot::<u32>(KeyboardEvent::VT_KEYCODE, keycode, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> KeyboardEventBuilder<'a, 'b> {
    let start = _fbb.start_table();
    KeyboardEventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<KeyboardEvent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum AdditionalDataOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct AdditionalData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AdditionalData<'a> {
    type Inner = AdditionalData<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> AdditionalData<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        AdditionalData {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args AdditionalDataArgs<'args>) -> flatbuffers::WIPOffset<AdditionalData<'bldr>> {
      let mut builder = AdditionalDataBuilder::new(_fbb);
      if let Some(x) = args.data { builder.add_data(x); }
      builder.finish()
    }

    pub const VT_DATA: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn data(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AdditionalData::VT_DATA, None)
  }
}

pub struct AdditionalDataArgs<'a> {
    pub data: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for AdditionalDataArgs<'a> {
    #[inline]
    fn default() -> Self {
        AdditionalDataArgs {
            data: None,
        }
    }
}
pub struct AdditionalDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AdditionalDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AdditionalData::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AdditionalDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AdditionalDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AdditionalData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum UserEventOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct UserEvent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for UserEvent<'a> {
    type Inner = UserEvent<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> UserEvent<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        UserEvent {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args UserEventArgs<'args>) -> flatbuffers::WIPOffset<UserEvent<'bldr>> {
      let mut builder = UserEventBuilder::new(_fbb);
      if let Some(x) = args.additional_data { builder.add_additional_data(x); }
      if let Some(x) = args.event { builder.add_event(x); }
      builder.add_event_type(args.event_type);
      builder.finish()
    }

    pub const VT_EVENT_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_EVENT: flatbuffers::VOffsetT = 6;
    pub const VT_ADDITIONAL_DATA: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn event_type(&self) -> Events {
    self._tab.get::<Events>(UserEvent::VT_EVENT_TYPE, Some(Events::NONE)).unwrap()
  }
  #[inline]
  pub fn event(&self) -> flatbuffers::Table<'a> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(UserEvent::VT_EVENT, None).unwrap()
  }
  #[inline]
  pub fn additional_data(&self) -> &'a [u8] {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(UserEvent::VT_ADDITIONAL_DATA, None).map(|v| v.safe_slice()).unwrap()
  }
  pub fn additional_data_nested_flatbuffer(&'a self) -> UserEvent<'a>{
     use self::flatbuffers::Follow;
     <flatbuffers::ForwardsUOffset<UserEvent<'a>>>::follow(self.additional_data(), 0)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn event_as_mouse_move_event(&self) -> Option<MouseMoveEvent<'a>> {
    if self.event_type() == Events::MouseMoveEvent {
      Some(MouseMoveEvent::init_from_table(self.event()))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn event_as_keyboard_event(&self) -> Option<KeyboardEvent<'a>> {
    if self.event_type() == Events::KeyboardEvent {
      Some(KeyboardEvent::init_from_table(self.event()))
    } else {
      None
    }
  }

}

pub struct UserEventArgs<'a> {
    pub event_type: Events,
    pub event: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub additional_data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
}
impl<'a> Default for UserEventArgs<'a> {
    #[inline]
    fn default() -> Self {
        UserEventArgs {
            event_type: Events::NONE,
            event: None, // required field
            additional_data: None, // required field
        }
    }
}
pub struct UserEventBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> UserEventBuilder<'a, 'b> {
  #[inline]
  pub fn add_event_type(&mut self, event_type: Events) {
    self.fbb_.push_slot::<Events>(UserEvent::VT_EVENT_TYPE, event_type, Events::NONE);
  }
  #[inline]
  pub fn add_event(&mut self, event: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UserEvent::VT_EVENT, event);
  }
  #[inline]
  pub fn add_additional_data(&mut self, additional_data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UserEvent::VT_ADDITIONAL_DATA, additional_data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> UserEventBuilder<'a, 'b> {
    let start = _fbb.start_table();
    UserEventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<UserEvent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, UserEvent::VT_EVENT,"event");
    self.fbb_.required(o, UserEvent::VT_ADDITIONAL_DATA,"additional_data");
    flatbuffers::WIPOffset::new(o.value())
  }
}

